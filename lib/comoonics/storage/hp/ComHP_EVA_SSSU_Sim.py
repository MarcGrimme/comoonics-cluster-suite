#!/usr/bin/python
"""
Python implementation of an HP SSSU utility simulator to emulate the output generated by communication to the EVA
"""

# here is some internal information
# $Id: ComHP_EVA_SSSU_Sim.py,v 1.3 2010-03-08 12:30:48 marc Exp $
#

__version__ = "$Revision: 1.3 $"
# $Source: /atix/ATIX/CVSROOT/nashead2004/management/comoonics-clustersuite/python/lib/comoonics/storage/hp/ComHP_EVA_SSSU_Sim.py,v $

import cmd
import sys
import re
from comoonics import ComLog
from comoonics import ComExceptions
from ComHP_EVA import HP_EVA_Object, HP_EVA_Storagecells, HP_EVA_Container

# Errors
class SSSUError(ComExceptions.ComException):
    def __init__(self, name=""):
        ComExceptions.ComException.__init__(self, name)
    def __str__(self):
        #ComLog.getLogger().debug()
        name=self.__class__.__name__[:len(self.__class__.__name__)-len("SSSUError")]
        if HP_EVA_SSSU_Sim.ERRORS.has_key(name.upper()):
            return HP_EVA_SSSU_Sim.ERRORS[name.upper()] %(self.value)
        else:
            return HP_EVA_SSSU_Sim.ERRORS["DEFAULT"] %(self.value)
class XMLSSSUError(ComExceptions.ComException): pass
class SyntaxSSSUError(SSSUError):pass
class AuthSSSUError(SSSUError): pass
class NotFoundSSSUError(SSSUError): pass
class NoSystemSelected(SSSUError): pass

class HP_EVA_SSSU_Sim(cmd.Cmd):
    __logStrLevel__="HP_EVA_SSSU_Sim"
    OBJECTID_BASE=1
    CMD_DELIM="\s+"
    CMD_OUTPUT={ "ls_system": "Systems available on this Manager:",
                 "ls_all": "%ss available on this Cell: \n%s\n",
                 "ls": "%s information: \n%s\n" }
    BANNER="""

SSSU for HP StorageWorks Command View EVA (Sim)
Version: 6.0             SimVersion: %s
Build: 35

""" %(__version__)
    DEFAULT_DOCHEADER="""
   The options are:"""
    DEFAULT_HELP="""
Command syntax help is available at any point within a command by
typing a '?'

For example:

Yekao> ADD VDISK Sbocaj ?

  The options are:
    COMMENT
    DISK_GROUP
    MIRRORED_WRITEBACK
    NOMIRRORED_WRITEBACK
    OS_UNIT_ID
    PREFERRED_PATH
    NOPREFERRED_PATH
    READ_CACHE
    NOREAD_CACHE
    REDUNDANCY
    SIZE
    WORLD_WIDE_LUN_NAME
    WRITE_PROTECT
    NOWRITE_PROTECT

Arguments that require keywords may also be queried, for example:

Yekao> ADD VDISK Enicar REDUNDANCY=?

  The options are:
    VRAID0
    VRAID1
    VRAID5

"""
    DEFAULT_PROMPT="NoSystemSelected"
    DEFAULT_PROMPT_FORMAT="%s> "
    DISPLAY_XMLSTATUS="""<sssucommandstatus>%s</sssucommandstatus>"""
    ERRORS={"AUTH": """
Error opening https connection

Press return to exit
""",
            "NOTFOUND": "Error: %s not found",
            "SYNTAX": """%s
Error: Syntax error at or near here
""",
            "NOSYSTEMSELECTED": """Error: Command not valid until a system is selected (SELECT SYSTEM)""",
            "DEFAULT": "%s" }
    def __init__(self, manager="127.0.0.1", user="Administrator", password="Administrator", stdin=sys.stdin, stdout=sys.stdout):
        cmd.Cmd.__init__(self, "\t", stdin, stdout)
        self.manager=manager
        self.username=user
        self.password=password
        self.intro=None
        self.doc_header=HP_EVA_SSSU_Sim.DEFAULT_DOCHEADER
        self.misc_header=""
        self.undoc_header=""
        self.ruler=None
        self.selected_system=None
        self.systems=HP_EVA_Container()
        self.display_xmlstatus=False
        self.setPrompt()
        self.setSystems()

    def generateNextObjectID():
        """
        Generates a new unique objectid for the next object of this simulator
        """
        HP_EVA_SSSU_Sim.OBJECTID_BASE=HP_EVA_SSSU_Sim.OBJECTID_BASE+1
        return "DC200%0.31u" %(HP_EVA_SSSU_Sim.OBJECTID_BASE)
    generateNextObjectID=staticmethod(generateNextObjectID)

    def parseParams(self, str):
        import shlex
        return shlex.split(str)

    def setSystems(self, systems=None):
        if not systems:
            self.systems=HP_EVA_Storagecells
        else:
            self.systems=systems
        return 1

    def ls(self, type, rest):
#        params=rest.split("\s+")
        params=self.parseParams(rest)
        #mylogger.debug("Params: %s" %(params))
        if self.selected_system:
            if len(params)==0:
                ComLog.getLogger().debug("ls(%s %s), %s: %s" %(type, rest, type, self.selected_system.getTransient(type)))
                self.stdout.write(self.CMD_OUTPUT["ls_all"] %(type, "\n".join(self.selected_system.getTransient(type).names())))
                return 0
            elif len(params)==1:
                ComLog.getLogger().debug("ls(%s %s), %s<%s>: %s" %(type, params[0], type, self.selected_system.getTransient(type).__class__, self.selected_system.getTransient(type)))
                self.stdout.write(self.CMD_OUTPUT["ls"] %(params[0], self.selected_system.getTransient(type).get(params[0])))
                return 0
            elif len(params)==2 and params[1]=="xml":
                import StringIO
                from xml.dom.ext import PrettyPrint
                ComLog.getLogger().debug("ls(%s %s), %s<%s>: %s" %(type, params[0], type, self.selected_system.getTransient(type).__class__, self.selected_system.getTransient(type)))
                buffer=StringIO.StringIO()
                PrettyPrint(self.selected_system.getTransient(type).get(params[0]).toXML(), buffer)
                self.stdout.write(self.CMD_OUTPUT["ls"] %(params[0], buffer.getvalue()))
                buffer.close()
                return 0
            else:
               raise SyntaxSSSUError("^".rjust(len(self.prompt)+len("ls")))
        else:
            raise NoSystemSelected()

    def add(self, type, rest):
        if self.selected_system:
            relevant_element=self.selected_system.getTransient(type)
            path=""
            if relevant_element!=None and isinstance(relevant_element, HP_EVA_Container):
                params=self.parseParams(rest)
                if type.lower()=="lun":
                    for param in params:
                        try:
                            (name, value)=param.split("=")
                            if name.lower() == "host":
                                path=value[:value.rindex("/")]
                        except ValueError:
                            continue
                if path != "":
                    objectname="%s/%s" %(path, params[0])
                else:
                    objectname="%s" %(params[0])
                add_params={"classtype": type,
                            "objectname": objectname,
                            "objectid": HP_EVA_SSSU_Sim.generateNextObjectID(),
                            "parent": self.selected_system}
                for param in params[1:]:
                    pair=param.split("=")
                    if len(pair)==1:
                        add_params[pair[0].lower()]=True
                    elif len(pair)==2:
                        add_params[pair[0].lower()]=pair[1]
                    else:
                        raise SyntaxSSSUError()
                if add_params.has_key("vdisk"):
                    vdisks=self.selected_system.getTransient("vdisk")
                    if vdisks.has_key(add_params["vdisk"]):
                        del add_params["vdisk"]
                    else:
                        raise NotFoundSSSUError(add_params["vdisk"])
                relevant_element.addElement(HP_EVA_Object(**add_params))
                return 0
            else:
                raise SyntaxSSSUError("^".rjust(len(self.prompt)+len("add")))
        else:
            raise NoSystemSelected()

    def delete(self, type, rest):
        if self.selected_system:
            params=self.parseParams(rest)
            relevant_element=self.selected_system.getTransient(type)
            if relevant_element!=None and isinstance(relevant_element, HP_EVA_Container):
                try:
                    del relevant_element[params[0]]
                    return 0
                except KeyError:
                    raise NotFoundSSSUError(params[0])
            else:
                raise SyntaxSSSUError("^".rjust(len(self.prompt)+len("delete ")))
        else:
            raise NoSystemSelected()

    def setPrompt(self, system=DEFAULT_PROMPT):
        self.prompt=self.DEFAULT_PROMPT_FORMAT %(system)

    def preloop(self):
        self.stdout.write(self.BANNER)
        if self.manager and self.username and self.password:
            self.stdout.write("Manager: ")
            self.stdout.flush()
            manager=self.stdin.readline()
            manager=manager.splitlines()[0]
            self.stdout.write("Username: ")
            self.stdout.flush()
            user=self.stdin.readline()
            user=user.splitlines()[0]
            self.stdout.write("Password: ")
            self.stdout.flush()
            passwd=self.stdin.readline()
            passwd=passwd.splitlines()[0]
            if self.do_select_manager("SELECT MANAGER %s USERNAME=%s PASSWORD=%s" %(manager, user, passwd)) != 0:
                raise AuthSSSUError()

    def parseline(self, line):
        self.last_line=line
        line=line.strip()
        if line and line[0]=='?':
            line="help %s" %(line)

        if line and not line[0]=='?' and line[len(line)-1]=='?':
            line=line[:len(line)-2]
            line="help %s" %(line)

        cmd1, arg1, line=cmd.Cmd.parseline(self, line)
        arg2, cmd2=(None, None)
        arg3, cmd3=(None, None)
        if arg1:
            cmd2, arg2, arg1=cmd.Cmd.parseline(self, arg1)
        if arg2:
            cmd3, arg3, arg2=cmd.Cmd.parseline(self, arg2)
        if cmd1:
            cmd1=cmd1.lower()
        if cmd2:
            cmd2=cmd2.lower()
        if cmd3:
            cmd3=cmd3.lower()
        ComLog.getLogger().debug("parseline: %s, %s, %s, %s, %s" %(cmd1, cmd2, cmd3, arg3, line))

        if hasattr(self, "do_%s_%s_%s" %(cmd1, cmd2, cmd3)):
            ComLog.getLogger().debug("%s_%s_%s(%s)" %(cmd1, cmd2, cmd3, arg3))
            return "%s_%s_%s" %(cmd1, cmd2, cmd3), arg2, line
        elif hasattr(self, "do_%s_%s" %(cmd1, cmd2)):
            ComLog.getLogger().debug("%s_%s(%s)" %(cmd1, cmd2, arg2))
            return "%s_%s" %(cmd1, cmd2), arg2, line
        else:
            ComLog.getLogger().debug("%s(%s)" %(cmd1, arg1))
            return cmd1, arg1, line

    def postcmd(self, returncode, line):
        """Hook method executed just after a command dispatch is finished."""
        if self.display_xmlstatus:
            print >>self.stdout, HP_EVA_SSSU_Sim.DISPLAY_XMLSTATUS %(returncode)
        if returncode >= 0:
            return 0
        else:
            return returncode
    def onecmd(self, line):
        try:
            return cmd.Cmd.onecmd(self, line)
        except SSSUError, se:
            self.stdout.write(se.__str__())
            return 1

    def do_add(self, rest):
        """ Adds something """
        self.default(rest)
        return 1
    def do_add_container(self, rest):
        """ Adds a new container """
        self.default(rest)
        return 1
    def do_add_copy(self, rest):
        """ Adds a new copy """
        self.default(rest)
        return 1
    def do_add_disk_group(self, rest):
        """ Adds a new diskgroup """
        self.default(rest)
        return 1
    def do_add_dr_group(self, rest):
        """ Adds a new drgroup """
        self.default(rest)
        return 1
    def do_add_folder(self, rest):
        """ Adds a new folder """
        self.default(rest)
        return 1
    def do_add_host(self, rest):
        """ Adds a new HOST """
        self.default(rest)
        return 1
    def do_add_iscsi_controller(self, rest):
        """ Adds a new iscsi_controller """
        self.default(rest)
        return 1
    def do_add_iscsi_lun(self, rest):
        """ Adds a new iscsi_lun """
        self.default(rest)
        return 1
    def do_add_mirrorclone(self, rest):
        """ Adds a new mirrorclone """
        self.default(rest)
        return 1
    def do_add_multisnap(self, rest):
        """ Adds a new multisnap """
        self.default(rest)
        return 1
    def do_add_lun(self, rest):
        """ Adds a new lun """
        return self.add("lun", rest)
    def do_add_snapshot(self, rest):
        """ Adds a new snapshot """
        return self.add("snapshot", rest)
    def do_add_system(self, rest):
        """ Adds a new system """
        self.default(rest)
        return 1
    def do_add_vdisk(self, rest):
        """ Adds a new vdisk """
        return self.add("vdisk", rest)

    def do_capture(self, rest):
        """ Captures something """
        self.default(rest)
        return 1
    def do_capture_configuration(self, rest):
        """ captures the configuration """
        self.default(rest)
        return 1
    def do_capture_validate(self, rest):
        """ validates the capture """
        self.default(rest)
        return 1

    def do_clear(self, rest):
        """ Clears something """
        self.default(rest)
        return 1
    def do_clear_licenses(self, rest):
        """ Clears the installed licenses """
        self.default(rest)
        return 1

    def do_codeload(self, rest):
        """ Filename for codeload """
        self.default(rest)
        return 1

    def do_delete(self, rest):
        """ deletes something """
        self.default(rest)
        return 1
    def do_delete_disk_group(self, rest):
        """ Delete a new diskgroup """
        self.default(rest)
        return 1
    def do_delete_dr_group(self, rest):
        """ Delete a new drgroup """
        self.default(rest)
        return 1
    def do_delete_folder(self, rest):
        """ Delete a new folder """
        self.default(rest)
        return 1
    def do_delete_host(self, rest):
        """ Delete a new HOST """
        self.default(rest)
        return 1
    def do_delete_iscsi_controller(self, rest):
        """ Delete a new iscsi_controller """
        self.default(rest)
        return 1
    def do_delete_iscsi_lun(self, rest):
        """ Delete a new iscsi_lun """
        self.default(rest)
        return 1
    def do_delete_lun(self, rest):
        """ Delete a new lun """
        return self.delete("lun", rest)
    def do_delete_system(self, rest):
        """ Delete a new system """
        self.default(rest)
        return 1
    def do_delete_vdisk(self, rest):
        """ Delete a new vdisk """
        return self.delete("vdisk", rest)

    def do_emversion(self, rest):
        """ EM Version """
        self.default(rest)
        return 1

    def do_exercise_disk(self, rest):
        """ Exercises a given disk """
        self.default(rest)
        return 1
    def do_exercise_disk_start(self, rest):
        """ Starts exercising a given disk """
        self.default(rest)
        return 1
    def do_exercise_disk_stop(self, rest):
        """ Stops exercising a given disk """
        self.default(rest)
        return 1
    def do_exercise_disk_summary(self, rest):
        """ Summarises exercising a given disk """
        self.default(rest)
        return 1

    def do_file(self, rest):
        """ Script filename containing SSSU commands"""
        self.default(rest)
        return 1

    def do_find(self, rest):
        """ finds something """
        self.default(rest)
        return 1
    def do_find_host(self, rest):
        """ finds the given host """
        self.default(rest)
        return 1
    def do_find_vdisk(self, rest):
        """ finds the given vdisk """
        self.default(rest)
        return 1
    def do_find_system(self, rest):
        """ finds the given system """
        self.default(rest)
        return 1

    def do_locate(self, rest):
        """ Locates something """
        self.default(rest)
        return 1
    def do_locate_disk(self, rest):
        """ Locates the given disk """
        self.default(rest)
        return 1

    def do_ls(self, rest):
        """ Lists something """
        self.default(rest)
        return 1
    def do_ls_cabinet(self, rest):
        """ Lists something """
        return self.ls("cabinet", rest)
    def do_ls_container(self, rest):
        """ Lists something """
        return self.ls("container", rest)
    def do_ls_controller(self, rest):
        """ Lists something """
        return self.ls("controller", rest)
    def do_ls_disk(self, rest):
        """ Lists something """
        return self.ls("disk", rest)
    def do_ls_disk_group(self, rest):
        """ Lists something """
        return self.ls("disk_group", rest)
    def do_ls_diskshelf(self, rest):
        """ Lists something """
        return self.ls("diskshelf", rest)
    def do_ls_dr_group(self, rest):
        """ Lists something """
        return self.ls("dr_group", rest)
    def do_ls_folder(self, rest):
        """ Lists something """
        return self.ls("folder", rest)
    def do_ls_host(self, rest):
        """ Lists something """
        return self.ls("host", rest)
    def do_ls_iscsi_controller(self, rest):
        """ Lists something """
        return self.ls("iscsi_controller", rest)
    def do_ls_iscsi_port(self, rest):
        """ Lists something """
        return self.ls("iscsi_port", rest)
    def do_ls_lun(self, rest):
        """ Lists something """
        return self.ls("lun", rest)
    def do_ls_manager(self, rest):
        """ Lists something """
        self.default(rest)
        return 1
    def do_ls_options(self, rest):
        """ Lists something """
        self.default(rest)
        return 1
    def do_ls_preferred_path(self, rest):
        """ Lists something """
        return self.ls("preferred_path", rest)
    def do_ls_snapshot(self, rest):
        """ Lists something """
        return self.ls("snapshot", rest)
    def do_ls_system(self, rest):
        """ Lists something """
        self.print_topics(self.CMD_OUTPUT["ls_system"], self.systems.names(), 80, 5)
        return 0
    def do_ls_time(self, rest):
        """ Lists something """
        self.default(rest)
        return 1
    def do_ls_vdisk(self, rest):
        """ Lists something """
        return self.ls("vdisk", rest)
    def do_ls_world_wide_name(self, rest):
        """ Lists something """
        return self.ls("world_wide_name", rest)

    def do_move(self, rest):
        """ moves something """
        self.default(rest)
        return 1
    def do_move_vdisk(self, rest):
        """ moves something """
        self.default(rest)
        return 1
    def do_move_host(self, rest):
        """ moves something """
        self.default(rest)
        return 1

    def do_pause(self, rest):
        """ Time to pause the execution of SSSU, or a script, in seconds. Makes a pause and drinks a cup of coffee """
        self.default(rest)
        return 1

    def do_rediscover(self, rest):
        """ Does a rediscover """
        self.default(rest)
        return 1

    def do_refresh(self, rest):
        """ Does a refresh of something """
        self.default(rest)
        return 1

    def do_restart(self, rest):
        """ Name of controller object """
        self.default(rest)
        return 1

    def do_select(self, rest):
        """ Selects something """
        self.default(rest)
        return 1
    def do_select_manager(self, rest):
        """ Selects the given manager """
        regexp=re.compile("^SELECT\s+Manager\s+(\S+)\s+USERNAME\s*=\s*(\S+)\s+PASSWORD\s*=\s*(\S+)\s*$", re.IGNORECASE)
        match=regexp.match(rest)
        manager=match.group(1)
        user=match.group(2)
        passwd=match.group(3)
        # ComLog.getLogger().debug("Manager: %s, User: %s, Password: %s" %(self.manager, self.username, self.password))
        if self.manager!=manager or self.username!=user or self.password!=passwd:
            return 1
        else:
            return 0

    def do_select_system(self, rest):
        """ Selects the given system"""
        if self.systems.has_key(rest):
            self.selected_system=self.systems[rest]
            self.setPrompt(rest)
            return 0
        else:
            raise NotFoundSSSUError(rest)

    def do_shutdown(self, rest):
        """ Name of controller object """
        self.default(rest)
        return 1

    def do_set(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_cabinet(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_controller(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_disk(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_disk_group(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_dr_group(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_diskshelf(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_folder(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_host(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_iscsi_controller(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_command_delay(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_nocommand_delay(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_display_width(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_on_error(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_retries(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_noretries(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_safe_delete(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_nosafe_delete(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_display_status(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_hide_status(self, rest):
        """ set ... """
        self.default(rest)
        return 1
    def do_set_options_display_xmlstatus(self, rest):
        """ sets the status output to xml """
        self.display_xmlstatus=True
        return 0
    def do_set_system(self, rest):
        """ set ... """
        systemname, option=re.split("\s+", rest, 2)
#        ComLog.getLogger().debug("do_set_system(system: %s, option: %s)" %(systemname, option))
        if self.systems.has_key(systemname):
            system=self.systems.get(systemname)
#            ComLog.getLogger().debug("do_set_system(system: %s, option: %s, %s)" %(system, option, self.systems))
            if hasattr(system, option):
                func=getattr(system, option)
                func()
            else:
                raise NotFoundSSSUError("%s on %s" %(option, systemname))
        else:
            raise NotFoundSSSUError(rest)
        return 0
    def do_set_vdisk(self, rest):
        """ set ... """
        self.default(rest)
        return 1

    def do_exit(self, rest):
        """ exit terminates the command loop """
        return -1

    def do_help(self, arg):
        ComLog.getLogger().debug("do_help(%s)" %(arg))
        arg=arg.strip()
        arg=arg.replace(" ", "_")
        if arg == '?' or arg == "help":
            cmds_keys=self.getCommands("do_")
            self.print_topics("",  cmds_keys, 15, 6)
            #self.print_topics(self.undoc_header, cmds_undoc, 15,80)
        elif arg:
            # XXX check arg syntax
            try:
                func = getattr(self, 'help_' + arg)
            except AttributeError:
                cmds_keys=self.getCommands("do_%s_" %(arg))
                if cmds_keys:
                    ComLog.getLogger().debug("do_help(%s, %s)" %(arg, cmds_keys))
                    self.print_topics("", cmds_keys, 15, 6)
                else:
                    try:
                        doc=getattr(self, 'do_' + arg).__doc__
                        if doc:
                            self.stdout.write("%s"%str(doc))
                            return
                    except AttributeError:
                        pass
#                    self.stdout.write("%s\n"%str(self.nohelp % (arg)))
                return
            func()
        else:
            self.stdout.write(HP_EVA_SSSU_Sim.DEFAULT_HELP)

    def getCommands(self, what):
            names = self.get_names()
            cmds = {}
            prevname = ''
            for name in names:
                if name[:len(what)] == what:
                    if name == prevname:
                        continue
                    prevname = name
                    under1=len(what)+name[len(what):].find("_")+1
#                    under2=-1
#                    if under1>0:
#                        under2=under1+name[under1:].find("_")+1
                    ComLog.getLogger().debug("do_help(name %s, what %s, under1 %u/%s" %(name, what, under1, name[:under1]))

                    if under1==len(what):
                        cmds[name[len(what):]]=1
                    elif under1>0 and not hasattr(self, name[:under1-1]):
                        cmds[name[len(what):]]=1
                    #elif not hasattr(self, "%s_%s" %(name[:name(+len
                    #    cmds[name[len(what):]]=1

#            self.stdout.write("%s\n"%str(self.doc_leader))
            self.stdout.write("%s" %(self.doc_header))
#            ComLog.getLogger().debug("do_help(cmds: %s" %(cmds))
            cmds_keys=cmds.keys()
            cmds_keys.sort()
            return cmds_keys

    def print_topics(self, header, cmds, cmdlen, maxcol):
        if cmds:
            self.stdout.write("%s\n"%str(header))
            if self.ruler:
                self.stdout.write("%s\n"%str(self.ruler * len(header)))
            self.columnize(cmds, maxcol-1)

    def columnize(self, list, space=5):
        if list:
            for row in list:
                # self.stdout.write("%s\n" %(row.upper()))
                self.stdout.write("%s%s\n" %("".rjust(space), row.upper()))

    def default(self, line):
        raise SyntaxSSSUError("^".rjust(len(self.prompt)+len(self.last_line)-len(line)))

mylogger=ComLog.getLogger(HP_EVA_SSSU_Sim.__logStrLevel__)

def main():
    import sys
    cwd=sys.argv[0]
    cwd=cwd[:cwd.rfind("/")]
    returnHP_EVA_ObjectFromXML("%s/test/system_dump.xml" %(cwd))
    returnHP_EVA_ObjectFromXML("%s/test/vdisk_dump.xml" %(cwd))
    returnHP_EVA_ObjectFromXML("%s/test/snapshot_dump.xml" %(cwd))
    returnHP_EVA_ObjectFromXML("%s/test/diskgroup_dump.xml" %(cwd))
    sssu_sim=HP_EVA_SSSU_Sim()
    sssu_sim.cmdloop()

def returnHP_EVA_ObjectFromXML(filename):
    from xml.dom.ext.reader import Sax2
    from xml.dom.ext import PrettyPrint
    reader=Sax2.Reader(validate=0)
    xml_dump=open(filename,"r")
    document=reader.fromStream(xml_dump)
    xml_dump.close()
    result=HP_EVA_Object.fromXML(document.documentElement)
    return result

if __name__ == '__main__':
    try:
        main()
    except ComExceptions.ComException, e:
        sys.stderr.write(e.__str__())

#######################
# $Log: ComHP_EVA_SSSU_Sim.py,v $
# Revision 1.3  2010-03-08 12:30:48  marc
# version for comoonics4.6-rc1
#
# Revision 1.2  2010/02/12 10:11:45  marc
# fixed pexpect imports
#
# Revision 1.1  2007/02/09 11:36:16  marc
# initial revision
#