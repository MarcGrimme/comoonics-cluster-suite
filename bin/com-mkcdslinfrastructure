#!/usr/bin/python
"""
Builds needed infrastructure to create cdsls, this contains creating directories and symbolic links. 
Does not include mounting of needed bindmounts. 
Uses an inventoryfile to get needed values. 
If inventoryfile does not exist, create it by using predefined defaultvalues and/or values which are specified via parameters. 
When using an existing inventoryfile, passing parameters which could be content of a inventoryfile will have no effect. 
These values would be ignored.
"""

__version__ = "$revision$"

import getopt
import sys
import logging
import xml
logging.basicConfig()

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

from comoonics import ComLog
import comoonics.cluster
from comoonics.cluster.ComClusterInfo import ClusterInfo
from comoonics.cluster.ComClusterRepository import ClusterRepository
from comoonics.cdsl import commonoptparseroptions, dirtrim
from comoonics.cdsl.ComCdslRepository import ComoonicsCdslRepository, CdslVersionException
# from comoonics import GetOpts

from optparse import OptionParser

parser = OptionParser(description=__doc__)
parser=commonoptparseroptions(parser)
parser.add_option("-t", "--cdsltree", default=ComoonicsCdslRepository.cdsltree_default, dest="cdsltree", help="path for hostdependent cdsls")
parser.add_option("-s", "--cdsltreeshared", default=ComoonicsCdslRepository.cdslsharedtree_default, dest="cdsltreeshared", help="path for the reshared cdsls")
parser.add_option("-L", "--cdsllink", default=ComoonicsCdslRepository.cdsllink_default, dest="cdsllink", help="path for the cdsl link.")
parser.add_option("-M", "--maxnodeidnum", default=ComoonicsCdslRepository.maxnodeidnum_default, dest="maxnodeidnum", type="int", help="Up to this nodeid node dirs are created")
parser.add_option("-N", "--usenodenames", default=not ComoonicsCdslRepository.usenodeids_default, dest="usenodenames", action="store_true", help="Use nodenames instead of nodeids.")
parser.add_option("-D", "--defaultdir", default=ComoonicsCdslRepository.defaultdir_default, dest="defaultdir", help="set the default node directory.")
parser.add_option("-S", "--sourceinventory", default=None, dest="sourceinventory", help="Source inventory file. Only for migration")
#parser.add_option("-p", "--nodeprefix", default=None, dest="nodeprefix", help="set the nodeprefix if needed")
parser.add_option("-C", "--onlyinventory", default=False, dest="onlyinventory", action="store_true", help="Only create the inventory file but don't create the filesystem structure.")
parser.add_option("-g", "--migrate", default=False, dest="migrate", action="store_true", help="Migrates the current cdsl inventory to latest version")
parser.add_option("-x", "--delete" , default=False, dest="delete", action="store_true", help="Deletes the cdsl infrastructure with all cdsls. Handle with extreme care!!")
parser.add_option("-e", "--create" , default=False, dest="create", action="store_true", help="Creates the cdsl infrastructure. Default is to create. So you don't need to specify it.")
parser.add_option("-p", "--get", default=None, dest="get", help="Get a specified parameter from the cdsl infrastructure.")
parser.add_option("-l", "--list", default=False, dest="list", action="store_true", help="List all parameters from the cdsl infrastructure.")
parser.add_option("-R", "--recursive", default=True, dest="recursive", action="store_true", help="Toggle if what to be done will be done recursive. Means also for subrepositories. Default: True")
parser.add_option("-f", "--force", default=False, dest="force", action="store_true", help="Toggle if what to be done will be forced if necessary. Default is: False.")

ComLog.setLevel(logging.INFO)
(options, args) = parser.parse_args()

if len(args) != 0:
    parser.error("No arguments are required. Please remove the arguments %s" %args)

if not options.usenodenames:
    _useNodeids = "True"
else:
    _useNodeids = "False"

if not options.delete and not options.get and not options.list and not options.migrate:
    options.create=True

doc=comoonics.cluster.parseClusterConf(options.clusterconf)
#create needed cluster objects
clusterRepository = ClusterRepository(doc.documentElement,doc)
clusterInfo = ClusterInfo(clusterRepository)

try:
    parentcdslRepository = ComoonicsCdslRepository(resource=options.inventoryfile,root=options.root, cdsltree=options.cdsltree, cdsltreeshared=options.cdsltreeshared, cdsllink=options.cdsllink, maxnodeidnum=str(options.maxnodeidnum), usenodeids=str(not options.usenodenames), defaultdir=options.defaultdir, nocreate=not options.create)
    if options.mountpoint != "" or options.mountpoint != "/":
        childcdslRepository = ComoonicsCdslRepository(resource=options.inventoryfile,root=options.root, mountpoint=options.mountpoint, cdsltree=options.cdsltree, cdsltreeshared=options.cdsltreeshared, cdsllink=options.cdsllink, maxnodeidnum=str(options.maxnodeidnum), usenodeids=str(not options.usenodenames), defaultdir=options.defaultdir, nocreate=not options.create)
    else:
        childcdslRepository=parentcdslRepository
    if options.create and not options.onlyinventory:
        childcdslRepository.buildInfrastructure(clusterInfo)
        if parentcdslRepository.root == childcdslRepository.root and parentcdslRepository.getMountpoint() != childcdslRepository.getMountpoint():
            parentcdslRepository.addRepository(childcdslRepository, options.mountpoint)
    elif options.delete:
        if not options.onlyinventory:
            childcdslRepository.removeInfrastructure(clusterinfo, options.recursive, options.force, True)
        if parentcdslRepository != childcdslRepository:
            parentcdslRepository.removeRepository(childcdslRepository)
    elif options.get:
        print childcdslRepository.getAttribute(options.get)
    elif options.list:
        for attribute in childcdslRepository.getElement().attributes:
            print "%s: %s" %(attribute.name, attribute.value)
    elif options.migrate:
        print "Seems you are using the latest version of the cdsl inventory. I will not try to migrate anything."
        sys.exit(0)
    else:
        parser.error("Wrong option or no option given. Please either specify create, list, get or delete as action.")
        sys.exit(1)
except CdslVersionException:
    if options.migrate:
        import comoonics.cdsl.migration
        cwd=os.getcwd()
        os.chdir(os.path.join(options.root, options.mountpoint))
        if not options.sourceinventory:
            options.sourceinventory=ComoonicsCdslRepository.guessresource()
        repository=comoonics.cdsl.migration.migrate(None, ComoonicsCdslRepository.version, fromresource=options.sourceinventory, toresource=options.inventoryfile, root=options.root, mountpoint=options.mountpoint)
        os.chdir(cwd)
        print("If no errors occured you can now savely remove the old cdsl inventory found in %s/%s\n" %(os.path.join(options.root, options.mountpoint), ComoonicsCdslRepository.default_resources[1]))
    else:
        raise
