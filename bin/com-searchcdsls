#!/usr/bin/python

__version__ = "$revision$"
__description__="""
Binary to search for cdsls in filesystem and add them to given inventoryfile
"""

import getopt
import sys
import logging
import xml

from comoonics import ComLog
from comoonics.ComExceptions import ComException
from comoonics import GetOpts

from comoonics.cdsl.ComCdslRepository import *
from comoonics.cdsl.ComCdslSearch import *

class Config(GetOpts.BaseConfig):
    def __init__(self):
        GetOpts.BaseConfig.__init__(self, sys.argv[0], __description__, __version__)
        self.quiet=GetOpts.Option("quiet", "Quiet, does not show any output",False,False,"q", self.setQuiet)
        self.verbose=GetOpts.Option("verbose", "Verbose, add debugging output",False,False,"d", self.setDebug)
        
        self.root=GetOpts.Option("root", "set chroot-path","/",False,"r")
                       
        self.inventoryfile=GetOpts.Option("inventoryfile", "path to used inventoryfile","/var/lib/cdsl/cdsl_inventory.xml",False,"l")
        self.clusterconf=GetOpts.Option("clusterconf", "path to used cluster.conf","/etc/cluster/cluster.conf",False,"c")
        
        self.defaultvalues=GetOpts.Option("defaultvalues", "use defaultvalues to perform cdsl-search, only needed when no other parameter is given",False,False,"V")
        
    def do(self, args_proper):
        import os.path
        if len(args_proper) > 0:
            self.usage()
            return 1
        return 0

    def setDebug(self, value):
        ComLog.setLevel(logging.DEBUG)
        
    def setQuiet(self, value):
        ComLog.setLevel(logging.CRITICAL)

ComLog.setLevel(logging.INFO)
#break if some wrong arguments exist
Config=Config()
ret=Config.getopt(sys.argv[1:])
if ret < 0:
    sys.exit(0)
elif ret > 0:
    sys.exit(ret)
#show help if no parameter is given
elif len(sys.argv) == 1:
    Config.usage()
    sys.exit(0)

cdslRepository = CdslRepository(Config.inventoryfile,None,False,None,None,None,None,None,Config.root)

# parse the document and create comclusterinfo object	
reader = Sax2.Reader(validate=False)
file = os.fdopen(os.open(Config.clusterconf,os.O_RDONLY))
try:
    doc = reader.fromStream(file)
except xml.sax._exceptions.SAXParseException, arg:
    log.critical("Problem while reading XML: " + str(arg))
    raise
file.close()

#create needed cluster objects
clusterRepository = ClusterRepository(doc.documentElement,doc)
clusterInfo = ClusterInfo(clusterRepository)

cdslSearch(cdslRepository,clusterInfo,Config.root)