#!/usr/bin/python

# here is some internal information
# $Id: rpm2db.py,v 1.1 2006/08/08 08:32:38 marc Exp $
#

__version__ = "$revision$"
__description__="""
Programm to retrieve systeminformation from the database
"""

# $Source: /usr/ATIX/CVSROOT/projects/se/hilti/config/hoi_config/scripts/rpm2db.py,v $
import sys
sys.path.append("/home/marc/atix/comoonics-clustersuite/python/lib")

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

from comoonics import ComLog
from comoonics.ComExceptions import ComException
from comoonics.ComSystemInformation import SystemInformation
from comoonics.cmdb.ComSoftwareCMDB import SoftwareCMDB
from comoonics.cmdb.ComDSL import DSL
from comoonics.cmdb.ComSource import Source
from comoonics import GetOpts
import logging.handlers

import logging
logging.basicConfig()

ComLog.setLevel(logging.INFO)

def line(str=None):
    print
    print "--------------------"+str+"---------------------------------"

class Config(GetOpts.BaseConfig):
    hostname="mysql-server.gallien.atix"
    user="atix"
    password="atix"
    database="atix_cmdb"
    systemname=None
    table="software_cmdb"
    syslog=None

    def __init__(self):
        GetOpts.BaseConfig.__init__(self, sys.argv[0], __description__, __version__)
        self.debug=GetOpts.Option("debug", "toggle debugmode and be more helpful", False, False, "D", self.setDebug)
        self.database=GetOpts.Option("database", "Sets the databasename", self.database, False, "d")
        self.user=GetOpts.Option("user", "Sets the database username", self.user, False, "u")
        self.hostname=GetOpts.Option("hostname", "Sets the database server hostname", self.hostname, False, "H")
        self.password=GetOpts.Option("password", "Sets the database server hostname", self.password, False, "p")
        self.syslog=GetOpts.Option("syslog", "Forward logmessages to given syslogserver", self.syslog, False, "y")
        self.values=dict()
        self.setAdditionalParams("[systemname] [table=%s]" %(self.table))
    def do(self, args_proper):
        import os.path
#        if len(args_proper) >= 1:
#            self.name=args_proper[0]
        if len(args_proper) >= 1:
            self.systemname=args_proper[0]
        if len(args_proper) >= 2:
            self.table=args_proper[1]
        return 0

    def setDebug(self, value):
        ComLog.setLevel(logging.DEBUG)

config=Config()

ret=config.getopt(sys.argv[1:])
if ret < 0:
    sys.exit(0)
elif ret > 0:
    config.usage()
    sys.exit(ret)

source=Source(hostname=config.hostname, user=config.user, password=config.password, database=config.database, table=config.table)

if config.syslog:
    sysloghandler=logging.handlers.SysLogHandler((config.syslog, logging.handlers.SYSLOG_UDP_PORT), logging.handlers.SysLogHandler.LOG_USER)
    source.log.addHandler(sysloghandler)

sysinfos=source.getSourcesAsSysteminformations(config.systemname)

for sysinfo in sysinfos:
    print sysinfo

# $Log: rpm2db.py,v $
# Revision 1.1  2006/08/08 08:32:38  marc
# initial revision
#