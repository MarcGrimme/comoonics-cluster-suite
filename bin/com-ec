#!/usr/bin/python
"""Com.oonics Enterprisecopy

The comoonics Enterprisecopy binary parses an xml configfile and then goes through every copy and modificationset and
does it.

"""


# here is some internal information
# $Id: com-ec,v 1.7 2006-12-15 10:10:46 marc Exp $
#


__version__ = "$Revision: 1.7 $"
__description__="""
The comoonics Enterprisecopy binary parses an xml configfile and then goes through every copy and modificationset and
does it.
"""
# $Source: /atix/ATIX/CVSROOT/nashead2004/management/comoonics-clustersuite/python/bin/com-ec,v $

from exceptions import Exception
import sys
import os
import xml.dom
from xml.dom.ext import PrettyPrint
from xml.dom.ext.reader import Sax2
import getopt
import logging
import warnings
sys.path.append("../lib")
from comoonics import GetOpts

sys.path.append("../lib")

from comoonics import ComLVM, ComSystem, ComLog
from comoonics.enterprisecopy import ComEnterpriseCopy, ComCopyset, ComModificationset

ComSystem.__EXEC_REALLY_DO=""

def line(str=None):
    print
    print "--------------------"+str+"---------------------------------"

class Config(GetOpts.BaseConfig):
    def __init__(self):
        GetOpts.BaseConfig.__init__(self, sys.argv[0], __description__, __version__)
        self.debug=GetOpts.Option("debug", "toggle debugmode and be more helpful", False, False, "d", self.setDebug)
        self.novalidate=GetOpts.Option("novalidate", "novalidate don't validate the xml. Handle with care!!!", False, False, "n")
        self.ask=GetOpts.Option("ask", "ask before any command is executed", False, False, "a")
        self.copyset=GetOpts.Option("copyset", "<name>|all only do all or the given modification set", None, False, "c")
        self.modificationset=GetOpts.Option("modificationset", "<name>|all only do all or the given modification set", None, False, "m")
        self.noundo=GetOpts.Option("noundo", "don't do the undoing if anything goes wrong", False, False, "U")
        self.xslt=GetOpts.Option("xslt", "preconvert xmlfile with given xsltfile.", None, False, "x")
        self.onlyxslt=GetOpts.Option("onlyxslt", "only do the xslt work", False, False, "X")
        self.setAdditionalParams("file [valuepath=value]*")
        self.values=dict()
    def do(self, args_proper):
        import os.path
        if len(args_proper) > 1:
            for arg in args_proper[1:]:
                (name, value)=arg.split("=")
                self.values[name]=value
        if len(args_proper) > 0 and os.path.isfile(args_proper[0]):
            self.filename=args_proper[0]
        elif len(args_proper) == 0:
            print >>self.__stderr__, "No file given to execute."
            self.usage()
            return 1
        return 0

    def setDebug(self, value):
        ComLog.setLevel(logging.DEBUG)

def setWarnings():
    warnings.filterwarnings(action = 'ignore', message='tempnam.*', category=RuntimeWarning, module='Com*')

def applyValues(element, values):
    from comoonics import xml_tools
    return xml_tools.overwrite_element_with_xpaths(element, values)

#try:
#    (opts, args_proper)=getopt.getopt(sys.argv[1:], 'hadnUc:m:x:X', [ 'help', 'ask', 'debug', 'novalidate', 'copyset=', 'modificationset=', 'noundo' , "xslt=", "onlyxslt" ])
#except getopt.GetoptError, goe:
#    print "Error parsing params: %s", goe
#    usage(sys.argv)
#    sys.exit(1)

ComLog.setLevel(logging.INFO)
config=Config()
ret=config.getopt(sys.argv[1:])
if ret < 0:
    sys.exit(0)
elif ret > 0:
    sys.exit(ret)

#for (opt, value) in opts:
##    print "Option %s" % opt
#    if opt == "-a" or opt == "--ask":
#        ASK_MODE=True
#    elif opt == "-d" or opt == "--debug":
#        DEBUG=True
#        ComLog.setLevel(logging.DEBUG)
#    elif opt == "-n" or opt == "--novalidate":
#        VALIDATE=FALSE
#    elif opt == "-c" or opt == "--copyset":
#        copysetname=value
#    elif opt == "-m" or opt == "--modificationset":
#        modsetname=value
#    elif opt == "-U" or opt == "--noundo":
#        noundo=True
#    elif opt == "-x" or opt == "--xslt":
#        xslt_mode=True
#        xslt_file=value
#    elif opt == "-X" or opt == "--onlyxslt":
#        only_xslt=True
#    elif opt == "-h" or opt == "--help":
#        usage(sys.argv)
#        sys.exit(0)

# filter warnings
setWarnings()

# create Reader object
if config.novalidate.value:
    reader = Sax2.Reader(validate=0)
else:
    reader = Sax2.Reader(validate=1)

if not config.filename:
    print "No file as input given exiting."
    usage(sys.argv)
    sys.exit(1)

try:
    if config.xslt.value:
        try:
           import libxslt
           import libxml2
           file=os.fdopen(os.open(config.xslt.value, os.O_RDONLY))
           n_doc = libxml2.parseFile(config.filename)
           if config.values:
               applyValues(n_doc, config.values)
           style = libxml2.parseFile(config.xslt.value)
           xslt_style = libxslt.parseStylesheetDoc(style)
           params={}
           res = xslt_style.applyStylesheet(n_doc, params)
           str_buff=xslt_style.saveResultToString(res)
           xslt_style.freeStylesheet()
           n_doc.freeDoc()
           res.freeDoc()
           from xml.dom.minidom import parseString
           doc=parseString(str_buff)

        except:
            line("Could not apply stylesheet to document. Quitting")
            import traceback
            traceback.print_exc()
            sys.exit(1)
        libxslt.cleanup()
        if config.onlyxslt.value:
            PrettyPrint(doc)
            sys.exit(0)
    else:
        file=open(config.filename,"r")
        line("Parsing document %s " % config.filename)
        doc = reader.fromStream(file)
        if config.values:
            applyValues(doc, config.values)

    ecopy=ComEnterpriseCopy.getEnterpriseCopy(doc.documentElement, doc)
    if config.ask.value:
        ComSystem.__EXEC_REALLY_DO="ask"
except KeyboardInterrupt:
    ComLog.getLogger(ComEnterpriseCopy.EnterpriseCopy.__logStrLevel__).info("Leaving because of user signal")
    sys.exit(1)

try:
    if ecopy.hasAttribute("name"):
        line("Execution of enterprisecopy %s" % (ecopy.getAttribute("name")))
    else:
        line("Execution of enterprisecopy %s" % ("unknown"))

    if (not config.copyset.value and not config.modificationset.value) or config.copyset.value:
        line("Executing %s copysets %u" % (config.copyset.value, len(ecopy.copysets)))
        ecopy.doCopysets(config.copyset.value)

    if (not config.copyset.value and not config.modificationset.value) or config.modificationset.value:
        line("Executing %s modificationsets %u" % (config.modificationset.value, len(ecopy.modificationsets)))
        ecopy.doModificationsets(config.modificationset.value)

    line("Successfully executed enterprisecopy.")
except KeyboardInterrupt:
    ComLog.getLogger(ComEnterpriseCopy.EnterpriseCopy.__logStrLevel__).info("Leaving because of user signal")
    sys.exit(1)
except Exception, e:
    ComLog.getLogger(ComEnterpriseCopy.EnterpriseCopy.__logStrLevel__).warn("Exception %s caught during copy." % e)
    import traceback
    traceback.print_exc()
    if config.noundo.value:
        line("Skipping undo on request")
    else:
        if not config.copyset.value and not config.modificationset.value or config.modificationset.value:
            line("Undoing executing %s modificationsets %u" % (config.modificationset.value, len(ecopy.modificationsets)))
            ComLog.getLogger(ComEnterpriseCopy.EnterpriseCopy.__logStrLevel__).warn("Undoing %s." % ComModificationset.Modificationset.TAGNAME)
            ecopy.undoModificationsets(config.copyset.value)
        if not config.copyset.value and not config.modificationset.value or config.copyset.value:
            line("Undoing executing %s copysets %u" % (config.copyset.value, len(ecopy.copysets)))
            ComLog.getLogger(ComEnterpriseCopy.EnterpriseCopy.__logStrLevel__).warn("Undoing %s." % ComCopyset.Copyset.TAGNAME)
            ecopy.undoCopysets(config.modificationset.value)

    line("Errors during execution of enterprisecopy.")
    sys.exit(2)

##################
# $Log: com-ec,v $
# Revision 1.7  2006-12-15 10:10:46  marc
# added option handling
# and overwriting parmeters.
#
# Revision 1.6  2006/09/28 08:44:45  marc
# Changed the options
#
# Revision 1.5  2006/08/28 15:58:36  marc
# nop
#
# Revision 1.4  2006/07/26 10:06:33  marc
# small change
#
# Revision 1.3  2006/07/24 15:40:33  marc
# added the xslt functionality
#
# Revision 1.2  2006/07/24 10:02:31  marc
# businesscopy=>enterprisecopy
#
# Revision 1.1  2006/07/19 14:31:06  marc
# removed com-ec.py and moved to com-ec
#
# Revision 1.3  2006/07/18 12:12:55  marc
# minor change.
#
# Revision 1.2  2006/07/11 09:24:41  marc
# added commandswitches -m and -c
#
# Revision 1.1  2006/07/07 08:40:02  marc
# initial revision business is enterprise now.
#
# Revision 1.6  2006/07/05 13:06:50  marc
# support names on every tag.
#
# Revision 1.5  2006/07/04 11:38:21  mark
# added support for Ctrl-C interrupt
#
# Revision 1.4  2006/07/04 11:16:11  mark
# added setWarinings()
#
# Revision 1.3  2006/07/04 11:01:48  marc
# be a little more verbose
#
# Revision 1.2  2006/07/03 16:11:10  marc
# added commandline params
#
# Revision 1.1  2006/06/30 13:57:13  marc
# initial revision
#