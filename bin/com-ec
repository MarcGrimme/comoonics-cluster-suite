#!/usr/bin/python
"""Com.oonics Enterprisecopy

The comoonics Enterprisecopy binary parses an xml configfile and then goes through every copy and modificationset and
does it.

"""


# here is some internal information
# $Id: com-ec,v 1.13 2007-06-13 13:07:13 marc Exp $
#


__version__ = "$Revision: 1.13 $"
__description__="""
The comoonics Enterprisecopy binary parses an xml configfile and then goes through every copy and modificationset and
does it.
"""
# $Source: /atix/ATIX/CVSROOT/nashead2004/management/comoonics-clustersuite/python/bin/com-ec,v $

from exceptions import Exception
import sys
import os
import xml.dom
from xml.dom.ext import PrettyPrint
from xml.dom.ext.reader import Sax2
import getopt
import logging
import warnings
from comoonics import GetOpts

from comoonics import ComLVM, ComSystem, ComLog
from comoonics.enterprisecopy import ComEnterpriseCopy, ComCopyset, ComModificationset

ComSystem.__EXEC_REALLY_DO=""
__logStrLevel__="com-ec"
console=logging.StreamHandler(sys.stdout)
consoleformater=logging.Formatter('-------------------%(name)-7s: %(levelname)-4s %(message)s--------------------')
console.setFormatter(consoleformater)
logger=logging.getLogger(__logStrLevel__)
logger.propagate=0
logger.setLevel(logging.INFO)
logger.addHandler(console)

def line(str=None):
    logger.info(str)

class Config(GetOpts.BaseConfig):
    def __init__(self):
        GetOpts.BaseConfig.__init__(self, sys.argv[0], __description__, __version__)
        self.debug=GetOpts.Option("debug", "toggle debugmode and be more helpful", False, False, "d", self.setDebug)
        self.novalidate=GetOpts.Option("novalidate", "novalidate don't validate the xml. Handle with care!!!", False, False, "n")
        self.ask=GetOpts.Option("ask", "ask before any command is executed", False, False, "a")
        self.copyset=GetOpts.Option("copyset", "<name>|all only do all or the given modification set", None, False, "c")
        self.modificationset=GetOpts.Option("modificationset", "<name>|all only do all or the given modification set", None, False, "m")
        self.noundo=GetOpts.Option("noundo", "don't do the undoing if anything goes wrong", False, False, "U")
        self.xslt=GetOpts.Option("xslt", "preconvert xmlfile with given xsltfile.", None, False, "x")
        self.onlydisplay=GetOpts.Option("onlydisplay", "only display the resulting dom as xml", False, False, "X")
        self.simulate=GetOpts.Option("simulate", "don't execute anything just simulate", False, False, "S")
        self.setAdditionalParams("file [valuepath=value]*")
        self.values=dict()
    def do(self, args_proper):
        import os.path
        if len(args_proper) > 1:
            for arg in args_proper[1:]:
                (name, value)=arg.split("=")
                self.values[name]=value
        if len(args_proper) > 0 and os.path.isfile(args_proper[0]):
            self.filename=args_proper[0]
        elif len(args_proper) == 0:
            logger.critical("No file given to execute.")
            self.usage()
            return 1
        else:
            logger.critical("Could not find file %s" %(args_proper[0]))
            return 1
        return 0

    def setDebug(self, value):
        ComLog.setLevel(logging.DEBUG)

def setWarnings():
    warnings.filterwarnings(action = 'ignore', message='tempnam.*', category=RuntimeWarning, module='Com*')

def applyValues(element, values):
    from comoonics import XmlTools
    return XmlTools.overwrite_element_with_xpaths(element, values)

ComLog.setLevel(logging.INFO)
config=Config()
ret=config.getopt(sys.argv[1:])
if ret < 0:
    sys.exit(0)
elif ret > 0:
    sys.exit(ret)


# filter warnings
setWarnings()

# create Reader object
# FIXME: validation with xslt transformation does not work
# BUG #33
if config.novalidate or config.xslt:
    reader = Sax2.Reader(validate=0)
else:
    reader = Sax2.Reader(validate=1)

if not config.filename:
    print "No file as input given exiting."
    usage(sys.argv)
    sys.exit(1)

try:
    if config.xslt:
        try:
           import libxslt
           import libxml2
           file=os.fdopen(os.open(config.xslt, os.O_RDONLY))
           n_doc = libxml2.parseFile(config.filename)
           if config.values:
               applyValues(n_doc, config.values)
           style = libxml2.parseFile(config.xslt)
           xslt_style = libxslt.parseStylesheetDoc(style)
           params={}
           res = xslt_style.applyStylesheet(n_doc, params)
           str_buff=xslt_style.saveResultToString(res)
           xslt_style.freeStylesheet()
           n_doc.freeDoc()
           res.freeDoc()
           doc=reader.fromString(str_buff)

        except Exception, e:
            line("Could not apply stylesheet to document. Quitting. Error: %s" %e)
            ComLog.debugTraceLog()
            sys.exit(1)
        libxslt.cleanup()
    else:
        file=open(config.filename,"r")
        line("Parsing document %s " % config.filename)
        doc = reader.fromStream(file)
        if config.values:
            applyValues(doc, config.values)

    if config.onlydisplay:
        PrettyPrint(doc)
        sys.exit(0)

    ecopy=ComEnterpriseCopy.getEnterpriseCopy(doc.documentElement, doc)
    logger=ComLog.getLogger(__logStrLevel__)
    if config.ask:
        ComSystem.__EXEC_REALLY_DO=ComSystem.ASK
    if config.simulate:
        ComSystem.__EXEC_REALLY_DO=ComSystem.SIMULATE
except KeyboardInterrupt:
    logger.warn("Leaving because of user signal")
    sys.exit(1)


if ecopy.hasAttribute("name"):
    _name=ecopy.getAttribute("name")
else:
    _name=config.filename

line("Start of enterprisecopy %s" % (_name))

try:
    if not config.copyset and not config.modificationset:
        line("Executing all sets %u" % (len(ecopy.allsets)))
        ecopy.doAllsets()
    else:
        if config.copyset:
            line("Executing copyset %s" % (config.copyset))
            ecopy.doCopysets(config.copyset)

        if config.modificationset:
            line("Executing modificationset %s" % (config.modificationset))
            ecopy.doModificationsets(config.modificationset)

    line("Finished execution of enterprisecopy %s successfully" % (_name))
except KeyboardInterrupt:
    logger.warn("Leaving enterprisecopy %s because of user signal" %(_name))
    sys.exit(1)
except Exception, e:
    logger.error("Error occured during execution of enterprisecopy %s. Errormessage: %s." %(_name, e))
    ComLog.debugTraceLog()
    if config.noundo:
        line("Finished execution of enterprisecopy with errors. Skipping undo on request")
    else:
        line("Undoing %u sets" % (len(ecopy.donesets)))
        ecopy.undo()

    line("Errors during execution of enterprisecopy %s." %(_name))
    sys.exit(2)

##################
# $Log: com-ec,v $
# Revision 1.13  2007-06-13 13:07:13  marc
# - made logging more readable
#
# Revision 1.12  2007/06/13 08:59:09  marc
# - changed logging to support new ComLog Design
#
# Revision 1.11  2007/03/26 08:40:33  marc
# - clean up
# - change long option for onlyxslt to onlydisplay to also work with non xslts to see how the resetting of attributes works
# - added functionality to overwrite attributes in xml.
#
# Revision 1.10  2007/02/27 15:39:35  mark
# some bugfixes
#
# Revision 1.9  2007/02/22 15:25:45  marc
# all .value in Options moved away
#
# Revision 1.8  2007/02/09 11:16:09  marc
# bugfix and change way of executing. Will execute any sequence of modification and copysets even mixed.
#
# Revision 1.7  2006/12/15 10:10:46  marc
# added option handling
# and overwriting parmeters.
#
# Revision 1.6  2006/09/28 08:44:45  marc
# Changed the options
#
# Revision 1.5  2006/08/28 15:58:36  marc
# nop
#
# Revision 1.4  2006/07/26 10:06:33  marc
# small change
#
# Revision 1.3  2006/07/24 15:40:33  marc
# added the xslt functionality
#
# Revision 1.2  2006/07/24 10:02:31  marc
# businesscopy=>enterprisecopy
#
# Revision 1.1  2006/07/19 14:31:06  marc
# removed com-ec.py and moved to com-ec
#
# Revision 1.3  2006/07/18 12:12:55  marc
# minor change.
#
# Revision 1.2  2006/07/11 09:24:41  marc
# added commandswitches -m and -c
#
# Revision 1.1  2006/07/07 08:40:02  marc
# initial revision business is enterprise now.
#
# Revision 1.6  2006/07/05 13:06:50  marc
# support names on every tag.
#
# Revision 1.5  2006/07/04 11:38:21  mark
# added support for Ctrl-C interrupt
#
# Revision 1.4  2006/07/04 11:16:11  mark
# added setWarinings()
#
# Revision 1.3  2006/07/04 11:01:48  marc
# be a little more verbose
#
# Revision 1.2  2006/07/03 16:11:10  marc
# added commandline params
#
# Revision 1.1  2006/06/30 13:57:13  marc
# initial revision
#