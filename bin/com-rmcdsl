#!/usr/bin/python

__version__ = "$revision$"
__description__="""
Binary to remove cdsls
"""

import getopt
import sys
import logging
import xml

from comoonics import ComLog
from comoonics.ComExceptions import ComException
from comoonics import GetOpts

from comoonics.cdsl.ComCdsl import *
from comoonics.cdsl.ComCdslRepository import *

class CdslNotExistsException(ComException):pass

class Config(GetOpts.BaseConfig):
    def __init__(self):
        GetOpts.BaseConfig.__init__(self, sys.argv[0], __description__, __version__)
        self.symbolicOnly=GetOpts.Option("symboliconly", "Removes only symbolic links", False, False, "s")
        self.noexecute=GetOpts.Option("noexecute", "display what would be done, but not really change filesystem",False,False,"n")
        self.quiet=GetOpts.Option("quiet", "Quiet, does not show any output",False,False,"q", self.setQuiet)
        self.verbose=GetOpts.Option("verbose", "Verbose, add debugging output",False,False,"d", self.setDebug)
        
        self.inventoryfile=GetOpts.Option("inventoryfile", "path to used inventoryfile","/var/lib/cdsl/cdsl_inventory.xml",False,"l")
        self.clusterconf=GetOpts.Option("clusterconf", "path to used cluster.conf","/etc/cluster/cluster.conf",False,"c")
        
        self.root=GetOpts.Option("root", "set chroot-path",None,False,"r")
        
        self.setAdditionalParams("[sourcename]")

    def do(self, args_proper):
        import os.path
        if len(args_proper) > 0:
            self.src=args_proper[0]
        else:
            self.usage()
            return 1
        return 0

    def setDebug(self, value):
        ComLog.setLevel(logging.DEBUG)
        
    def setQuiet(self, value):
        ComLog.setLevel(logging.CRITICAL)

ComLog.setLevel(logging.INFO)
#Bei ungueltigen Argumenten abrechen
Config=Config()
ret=Config.getopt(sys.argv[1:])
if ret < 0:
    sys.exit(0)
elif ret > 0:
    sys.exit(ret)
    
if Config.noexecute:
    ComSystem.__EXEC_REALLY_DO="simulate"
          
# parse the document and create comclusterinfo object
reader = Sax2.Reader(validate=False)
file = os.fdopen(os.open(Config.clusterconf,os.O_RDONLY))
try:
    doc = reader.fromStream(file)
except xml.sax._exceptions.SAXParseException, arg:
    log.critical("Problem while reading XML: " + str(arg))
    raise
file.close()

#create needed cluster objects
clusterRepository = ClusterRepository(doc.documentElement,doc)
clusterInfo = ClusterInfo(clusterRepository)
    
#create cdsl objects
cdslRepository = CdslRepository(Config.inventoryfile,None,False,None,None,None,None,None,Config.root)

cdsl = cdslRepository.getCdsl(Config.src)

if type(cdsl).__name__=="NoneType":
	raise CdslNotExistsException("Cdsl with source " + Config.src + " does not exist in Inventoryfile.")

if Config.symbolicOnly:
    cdsl.delete(force=False,root=Config.root)
else:
    cdsl.delete(root=Config.root)