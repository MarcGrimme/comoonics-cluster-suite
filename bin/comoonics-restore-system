#!/usr/bin/python
"""Assistant for the Comoonics desaster recovery


"""

# here is some internal information
# $Id:  $
#

__version__ = "$Revision: $"
__description__="""
Comoonics Assistant for desaster recovery
"""
# $Source:  $

import sys
import os
import os.path
import logging
from optparse import OptionParser, IndentedHelpFormatter
logging.basicConfig()

sys.path.append("../lib")

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

from comoonics import ComLog, ComSystem
from comoonics.ComExceptions import ComException

from comoonics.assistant.ComAssistantTui import AssistantTui, CancelException
from comoonics.assistant.ComECAssistantController import ECAssistantController

#default settings

WARNING="CAUTION: This operation will destroy all data on the destination devices ! \
	Are you sure to continue ?" 

MOUNTPOINT="/restore"

LOCALCLONE_XSL="/opt/atix/comoonics-cs/xsl/localclone.xsl"
DRRESTORE_XML_TEMPLATE="drrestore.xml"
DRRESTORE_INFODEF="/etc/comoonics/enterprisecopy/xml-dr/drrestore.infodef.xml"


def setDebug(option, opt, value, parser):
	ComLog.setLevel(logging.DEBUG)
	setattr(parser.values, option.dest, True)

def setSimulate(option, opt, value, parser):
	ComSystem.__EXEC_REALLY_DO="simulate"
	setattr(parser.values, option.dest, True)

def setAsk(option, opt, value, parser):
	ComSystem.__EXEC_REALLY_DO="ask"
	setattr(parser.values, option.dest, True)
	
def setReally(option, opt, value, parser):
	setattr(parser.values, option.dest, False)
	
def setFast(option, opt, value, parser):
	setattr(parser.values, option.dest, False)
	

ComLog.setLevel(logging.INFO)
log=ComLog.getLogger("comoonics-assistant")

parser = OptionParser(description=__doc__, version=__version__)

# Default Options
parser.add_option("-D", "--debug", dest="debug", default=False, action="callback", callback=setDebug, help="Debug")
parser.add_option("-s", "--simulate", dest="debug", default=False, action="callback", callback=setSimulate, help="Simulate")
parser.add_option("-a", "--ask", dest="debug", default=False, action="callback", callback=setAsk, help="Ask")
#
parser.add_option("-X", "--xml", dest="really", default=True, action="callback", callback=setReally)
parser.add_option("-F", "--fast", dest="scan", default=True, action="callback", callback=setFast)
parser.add_option("-S", "--source", dest="source", default="/dev/cdrom", action="store", help="source device")

(options, args) = parser.parse_args()
    
# generate the assistant controllers


if not os.path.exists(MOUNTPOINT):
	os.makedirs(MOUNTPOINT)
rc, ret = ComSystem.execLocalStatusOutput("mount %s %s" %( options.source, MOUNTPOINT))
if rc != 0:
	print "Error: cannot mount %s %s." %( options.source, MOUNTPOINT )
	sys.exit(1)

ac_drrestore=ECAssistantController("%s/%s" %( MOUNTPOINT, DRRESTORE_XML_TEMPLATE), DRRESTORE_INFODEF, LOCALCLONE_XSL, scan=True)

tui=AssistantTui([ ac_drrestore ])
if tui.run(WARNING): 
	ac_drrestore.run(options.really)
else:
	print "Exiting ..."

ComSystem.execLocalStatusOutput("umount %s" %( MOUNTPOINT))
