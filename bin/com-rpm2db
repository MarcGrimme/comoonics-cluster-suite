#!/usr/bin/python

# here is some internal information
# $Id: rpm2db.py,v 1.1 2006/08/08 08:32:38 marc Exp $
#

__version__ = "$revision$"
__description__="""
Programm to update all installed rpms in the database
"""

# $Source: /usr/ATIX/CVSROOT/projects/se/hilti/config/hoi_config/scripts/rpm2db.py,v $
import sys
import logging
import logging.handlers

from comoonics import ComLog
from comoonics.ComExceptions import ComException
from comoonics.ComSystemInformation import SystemInformation
from comoonics.cmdb.ComSoftwareCMDB import SoftwareCMDB
from comoonics.cmdb.ComDSL import DSL
from comoonics.cmdb.ComSource import Source
from comoonics import GetOpts

import logging

ComLog.setLevel(logging.INFO)

def line(str=None):
    print
    print "--------------------"+str+"---------------------------------"

class Config(GetOpts.BaseConfig):
    hostname="mysql-server.gallien.atix"
    user="atix"
    password="atix"
    database="atix_cmdb"
    category="unknown"
    table="dsl"
    rpmfiles=list()
    syslog=None

    def __init__(self, systeminformation):
        GetOpts.BaseConfig.__init__(self, sys.argv[0], __description__, __version__)
        self.debug=GetOpts.Option("debug", "toggle debugmode and be more helpful", False, False, "D", self.setDebug)
        self.database=GetOpts.Option("database", "Sets the databasename", self.database, False, "d")
        self.user=GetOpts.Option("user", "Sets the database username", self.user, False, "u")
        self.hostname=GetOpts.Option("hostname", "Sets the database server hostname", self.hostname, False, "H")
        self.password=GetOpts.Option("password", "Sets the database server hostname", self.password, False, "p")
        self.syslog=GetOpts.Option("syslog", "Forward logmessages to given syslogserver", self.syslog, False, "y")
        self.values=dict()
        self.name=systeminformation.getName()
        self.setAdditionalParams("[category=%s] [rpmfiles=%s]" %(self.category, self.rpmfiles))
    def do(self, args_proper):
        import os.path
#        if len(args_proper) >= 1:
#            self.name=args_proper[0]
        if len(args_proper) >= 1:
            self.category=args_proper[0]
        if len(args_proper) >= 2:
            self.rpmfiles=list(args_proper[1:])
        return 0

    def setDebug(self, value):
        ComLog.setLevel(logging.DEBUG)

systeminformation=SystemInformation()
config=Config(systeminformation)

ret=config.getopt(sys.argv[1:])
if ret < 0:
    sys.exit(0)
elif ret > 0:
    config.usage()
    sys.exit(ret)

software_cmdb=SoftwareCMDB(hostname=config.hostname, user=config.user, password=config.password, database=config.database, table=config.table, logsource=systeminformation.getName())
dsl=DSL(dbhandle=software_cmdb.db, table="dsl", logsource=systeminformation.getName())
source=Source(dbhandle=software_cmdb.db, logsource=systeminformation.getName())

if config.syslog:
    sysloghandler=logging.handlers.SysLogHandler((config.syslog, logging.handlers.SYSLOG_UDP_PORT), logging.handlers.SysLogHandler.LOG_USER)
    sysloghandler.setLevel(logging.INFO)
    software_cmdb.log.addHandler(sysloghandler)
    dsl.log.addHandler(sysloghandler)
    source.log.addHandler(sysloghandler)
    software_cmdb.dblog.addHandler(sysloghandler)
    dsl.dblog.addHandler(sysloghandler)
    source.dblog.addHandler(sysloghandler)

line("Updating Systeminformation of "+systeminformation.getName())

source.updateSystemInformation(systeminformation, config.category)

line("Updating RPMS of "+systeminformation.getName()+ " filter: %s" %(config.rpmfiles))

if not config.rpmfiles or len(config.rpmfiles) == 0:
    rpms=systeminformation.getInstalledSoftware()
else:
    rpms=list()
    for rpmname in config.rpmfiles:
        rpms+=systeminformation.getInstalledSoftware(rpmname)

rpmnames=list()
for rpm_hdr in rpms:
    rpmnames.append(rpm_hdr["name"])

software_cmdb.cleanTMP(config.name)
for rpm_hdr in rpms:
    (channelname, channelversion)=dsl.getChannelVersion(rpm_hdr)
    try:
        software_cmdb.updateRPM(rpm_hdr, config.name, channelname, channelversion, rpmnames.count(rpm_hdr["name"]))
    except:
        software_cmdb.dblog.log(logging.WARN, "Exception occured during update of rpm %s-%s-%s-%s." %(rpm_hdr["name"], rpm_hdr["version"], rpm_hdr["release"], rpm_hdr["arch"]), exc_info=True)
software_cmdb.deleteNotInTmp(config.name, config.rpmfiles)
#software_cmdb.cleanTMP(config.name)

software_cmdb.db.commit()

# $Log: rpm2db.py,v $
# Revision 1.1  2006/08/08 08:32:38  marc
# initial revision
#