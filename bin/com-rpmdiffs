#!/usr/bin/python

# here is some internal information
# $Id: getRPMDiffs.py,v 1.1 2006/08/08 08:32:38 marc Exp $
#

__version__ = "$revision$"
__description__="""
Compares installbase of two clusters/sources with each other
"""

# $Source: /usr/ATIX/CVSROOT/projects/se/hilti/config/hoi_config/scripts/getRPMDiffs.py,v $
import sys

import os.path
sys.path.append(os.path.join(os.path.normpath(sys.prefix), "lib", "python" + sys.version[:3], "site-packages"))

from comoonics import ComSystem, ComLog, ComExceptions
from comoonics.cmdb.ComSoftwareCMDB import SoftwareCMDB
from comoonics.cmdb.ComSource import Source
from comoonics.cmdb.Reports import getReport, getReportkeys
from comoonics.cmdb.Packages import Package
from comoonics.tools.poptparse import PersistentOptionParser, OptionGroup
from comoonics.cmdb import get_defaultsenvkey, get_defaultsfiles

import logging
import logging.handlers
logging.basicConfig()
log=ComLog.getLogger(sys.argv[0])

usage="usage: %prog [options] sourcename sourcename|searchstring [sourcename]*"
cmd_parser=PersistentOptionParser(description=__description__, prog="com-rpmdiffs", globaldefaultsfile=get_defaultsfiles()[0], localdefaultsfile=get_defaultsfiles()[1], localdefaultsenvkey=get_defaultsenvkey())
cmd_parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="toggle verbose mode and be more helpful")
cmd_parser.add_option("-y", "--syslog", action="store", type="string", dest="syslog", default=None, help="Forward logmessages to given syslogserver.")
db_options=OptionGroup(cmd_parser, "Database Options")
db_options.add_option("-d", "--database", action="store", type="string", dest="database", default="cmdb", help="Sets the databasename")
db_options.add_option("-H", "--hostname", action="store", type="string", dest="hostname", default="localhost", help="Sets the hostname for the database server")
db_options.add_option("-u", "--username", action="store", type="string", dest="username", help="Sets the database username")
db_options.add_option("-p", "--password", action="store", type="string", dest="password", help="Sets the database server password to the username")
db_options.add_option("-t", "--table", action="store", type="string", dest="table", default="software_cmdb", help="Which table to be taken.")
cmd_parser.add_option_group(db_options)

search_options=OptionGroup(cmd_parser, "Search Options")
search_options.add_option("-c", "--category", action="store_true", dest="category", default=False, help="Set to search for a categories. Default: %default.")
search_options.add_option("-m", "--master", action="store", type="string", dest="master", default=None, help="Compare a master with others. Default: %default.")
search_options.add_option("-s", "--search", action="append", type="string", dest="search", default=list(), help="search for string. Default: %default.")
search_options.add_option("-g", "--global", action="store_false", dest="sglobal", default=True, help="Search in all columns for the given search string. Default: %default.")
search_options.add_option("-w", "--where", action="store_true", dest="where", default=False, help="Interpret search sting as valid where clause without where. Default: %default.")
cmd_parser.add_option_group(search_options)

report_options=OptionGroup(cmd_parser, "Output Report Options")
report_options.add_option("--reporttype", action="store", type="string", dest="reporttype", default=None, help="Select a valid report type. Default: %default.")
report_options.add_option("--reportslist", action="store_true", dest="reportslist", default=False, help="List all available reports.")
report_options.add_option("--from", action="store", type="int", dest="limitfrom", default=0, help="from result x. Default: %default.")
report_options.add_option("--to", action="store", type="int", dest="limitto", default=0, help="to result y. Default: %default.")
cmd_parser.add_option_group(report_options)

ComLog.setLevel(logging.INFO)
opts, args=cmd_parser.parse_args()
if opts.verbose:
    ComLog.setLevel(logging.DEBUG)

#if len(args) == 0:
#    cmd_parser.exit(1, "No sourcename entered. Please use -h/--help to see cmdline options.")

if opts.syslog:
    sysloghandler=logging.handlers.SysLogHandler((opts.syslog, logging.handlers.SYSLOG_UDP_PORT), logging.handlers.SysLogHandler.LOG_USER)
    software_cmdb.log.addHandler(sysloghandler)

where=None

if len(opts.search) > 0:
    if opts.sglobal and not opts.where:
        where=map(lambda search: "("+" OR ".join(map(lambda colname: colname +" LIKE \"%"+search+"%\"", Package.PACKAGE_PROPERTY_NAMES))+")", opts.search)
    elif not opts.where:
        where=map(lambda search: "name = \""+search+"\"", opts.search)
    else:
        where=opts.search
if opts.limitfrom>opts.limitto:
    cmd_parser.exit("To (%u) must be bigger then from (%u).\n" %(opts.limitfrom, opts.limitto)) 

if opts.master and not opts.reporttype:
    opts.reporttype="masterdiffs/text/plain"
elif not opts.reporttype:
    opts.reporttype="diffs/text/plain"

if opts.reportslist:
    print "\n".join(getReportkeys())
elif not args:
    cmd_parser.exit(2, "No argument given. At least one argument for a source is required. See %s --help\n" %cmd_parser.prog)
else:
    software_cmdb=SoftwareCMDB(hostname=opts.hostname, user=opts.username, password=opts.password, database=opts.database, table=opts.table)
    if opts.category and not opts.master:
        dbsource=Source(dbhandle=software_cmdb.db)
        sources=dbsource.getSourcesForCategory(args[0])        
    elif opts.master or not opts.category:
        sources=args
    else:
        cmd_parser.exit(2, "%s called with wrong parameters. Please check with -h/--help." %cmd_parser.get_prog_name())

    packages=software_cmdb.getPackages(sources, opts.master, None, 0, 0, where)
    differences=packages.differences()
    reporter=getReport(opts.reporttype)()
    if opts.limitfrom <=0:
        opts.limitfrom=1
    if opts.limitto <=0:
        opts.limitto=0
    reporter.report(master=opts.master, packages=differences, frompackage=opts.limitfrom-1, topackage=opts.limitto-1)

##########
# $Log$