#!/usr/bin/python

# here is some internal information
# $Id: getRPMDiffs.py,v 1.1 2006/08/08 08:32:38 marc Exp $
#

__version__ = "$revision$"
__description__="""
Compares installbase of two clusters/sources with each other
"""

# $Source: /usr/ATIX/CVSROOT/projects/se/hilti/config/hoi_config/scripts/getRPMDiffs.py,v $
import sys

from comoonics import ComSystem, ComLog, ComExceptions
from comoonics import GetOpts
from comoonics.cmdb.ComSoftwareCMDB import SoftwareCMDB

import logging

log=ComLog.getLogger(sys.argv[0])

def line(str=None):
    print
    print "--------------------"+str+"---------------------------------"

class Config(GetOpts.BaseConfig):
    hostname="mysql-server.gallien.atix"
    user="atix"
    password="atix"
    database="atix_cmdb"
    category="unknown"
    table="software_cmdb"
    category=False
    master=None
    sourcenames=list()
    search=False
    limitup=0
    limitdown=0
    orderby=None
    onlydiffs=False
    onlynotinstalled=False
    installed=False
    searchstring=""

    def __init__(self):
        GetOpts.BaseConfig.__init__(self, sys.argv[0], __description__, __version__)
        self.debug=GetOpts.Option("debug", "toggle debugmode and be more helpful", False, False, "D", self.setDebug)
        self.database=GetOpts.Option("database", "Sets the databasename", self.database, False, "d")
        self.user=GetOpts.Option("user", "Sets the database username", self.user, False, "u")
        self.hostname=GetOpts.Option("hostname", "Sets the database server hostname", self.hostname, False, "H")
        self.password=GetOpts.Option("password", "Sets the database server hostname", self.password, False, "p")
        self.category=GetOpts.Option("category", "Set for search as categories", self.category, False, "c")
        self.master=GetOpts.Option("master", "Compare a master with others", self.master, False, "m")
        self.search=GetOpts.Option("search", "search for only one source", self.search, False, "1")
        self.searchstring=GetOpts.Option("searchstring", "search for string", self.searchstring, False, "s")
        self.limitup=GetOpts.Option("limitup", "limitup from", self.limitup, False, "L")
        self.limitdown=GetOpts.Option("limitdown", "limitto to", self.limitdown, False, "l")
        self.orderby=GetOpts.Option("orderby", "Orderbystring without ORDER BY", self.orderby, False, "o")
        self.onlydiffs=GetOpts.Option("onlydiffs", "Only display differences. But not uninstalled software", self.onlydiffs, False, "O")
        self.onlynotinstalled=GetOpts.Option("onlynotinstalled", "Only display differenceds", self.onlynotinstalled, False, "N")
        self.installed=GetOpts.Option("installed", "Also display equal packages", self.installed, False, "i")
        self.values=dict()
        self.setAdditionalParams("sourcename sourcename|searchstring [[sourcename]..]")
    def do(self, args_proper):
        if len(args_proper) >= 2 or (len(args_proper) == 1 and (self.search or self.master or self.category)):
            for arg in args_proper:
                self.sourcenames.append(arg)
        else:
            return 1
        return 0

    def setDebug(self, value):
        ComLog.setLevel(logging.DEBUG)

ComLog.setLevel(logging.INFO)

config=Config()

ret=config.getopt(sys.argv[1:])
if ret < 0:
    sys.exit(0)
elif ret > 0:
    config.usage()
    sys.exit(ret)


software_cmdb=SoftwareCMDB(hostname=config.hostname, user=config.user, password=config.password, database=config.database, table=config.table)

def formatRow(row, colnames):
    orderedrow=list()
    for colname in colnames:
        orderedrow.append(str(row[colname]))
    return ', '.join(orderedrow)

def formatColNames(row):
    return ', '.join(row)

colnames=None
where=None
if len(config.sourcenames)>1 and config.search and (not config.searchstring or config.searchstring==""):
    config.searchstring=config.sourcenames[1]
if config.searchstring:
    where=["name LIKE \"%"+config.searchstring+"%\""]
if config.category and not config.search and not config.master:
   colnames=software_cmdb.getColnamesForDiffCategory(config.sourcenames[0])
   rs=software_cmdb.getDiffsFromCategory(config.sourcenames[0], None, config.limitdown, config.limitup, where, config.orderby, not config.onlynotinstalled, not config.onlydiffs, config.installed)
elif not config.search and not config.master and not config.category:
   rs=software_cmdb.getDiffsFromSources(config.sourcenames, None, config.limitdown, config.limitup, where, config.orderby, not config.onlynotinstalled, not config.onlydiffs, config.installed)
   colnames=software_cmdb.getColnamesForDiff(config.sourcenames)
elif not config.category and not config.search and config.master:
   rs=software_cmdb.getDiffsFromSourcesByMaster(config.sourcenames, config.master, None, config.limitdown, config.limitup, where, config.orderby, not config.onlynotinstalled, not config.onlydiffs, config.installed)
   colnames=software_cmdb.getColnamesForMaster((not config.onlynotinstalled or not config.onlydiffs) and config.installed)
elif config.search and not config.master:
    colnames=SoftwareCMDB.SELECT_FOR_SOFTWARE
    rs=software_cmdb.getSoftware(config.sourcenames[0], SoftwareCMDB.SELECT_FOR_SOFTWARE, config.limitdown, config.limitup, where, config.orderby)
if rs:
    ComLog.getLogger().debug("Got %u rows" % rs.num_rows())
    row=rs.fetch_row(1,1)
    if not colnames:
        colnames=row[0].keys()
    print formatColNames(colnames)
    while row:
        print formatRow(row[0], colnames)
        row=rs.fetch_row(1,1)

##########
# $Log$